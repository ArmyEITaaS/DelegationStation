name: sbx-software-deployment

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - 'feature/**'
  #     - 'main'
  #   paths:
  #     - '.github/workflows/sbx-software-deployment.yml'
  #     - 'src/**'
  # pull_request:
  #   branches: [main]
  #   paths:
  #     - '.github/workflows/sbx-software-deployment.yml'
  #     - 'src/**'

# permissions:
#   actions: read
#   checks: write
#   contents: read


env:
  AZ_ENVIRONMENT: AzureUSGovernment
  CONFIGURATION: Release
  DOTNET_FUNCTION_VERSION: 6.0.x
  DOTNET_APP_VERSION: 8.0.x

  AZURE_UPDATE_FUNCTION_NAME: sbx-netcom-winget-fn
  AZURE_UPDATE_FUNCTION_PACKAGE_PATH: .\published
  AZURE_UPDATE_FUNCTION_PKG_NAME: deploy.zip

  AZURE_APP_NAME: sbx-netcom-winget-fn
  AZURE_APP_PACKAGE_PATH: .\published
  AZURE_APP_PKG_NAME: deploy.zip

  SRC_DIR: .
  # TEST_DIR: ./src/WinGet.RestSource.UnitTest
  # AZ_STORAGE_KEY:          ${{ secrets.ARTIFACT_STORAGE_KEY }}
  # ARM_CLIENT_ID:           ${{ secrets.AZURE_S_EITAAS_NETCOM_SP_CLIENT_ID }}
  # ARM_CLIENT_SECRET:       ${{ secrets.AZURE_S_EITAAS_NETCOM_SP_CLIENT_SECRET }}
  # ARM_TENANT_ID:           ${{ secrets.AZURE_EITAAS_TENANT_ID }}
  
jobs:

   build-test:
     runs-on: windows-latest
     steps:
     - uses: actions/checkout@v3

     - name: Setup .NET6 SDK
       uses: actions/setup-dotnet@v3
       with:
         dotnet-version: ${{ env.DOTNET_FUNCTION_VERSION }}

     - name: Setup .NET8 SDK
       uses: actions/setup-dotnet@v3
       with:
         dotnet-version: ${{ env.DOTNET_APP_VERSION }}

     - name: Restore
       run: dotnet restore "${{ env.SRC_DIR }}"

     - name: Build
       run: dotnet build "${{ env.SRC_DIR }}" --configuration ${{ env.CONFIGURATION }} --no-restore

    #  - name: Unit Test Setup
    #    shell: pwsh
    #    run: |

    #      # Launch Cosmos DB emulator
    #      Import-Module "$env:ProgramFiles\Azure Cosmos DB Emulator\PSModules\Microsoft.Azure.CosmosDB.Emulator"
    #      Start-CosmosDbEmulator
     

    #  - name: Unit Test
    #    run: dotnet test "${{ env.TEST_DIR }}/WinGet.RestSource.UnitTest.csproj" --no-build --no-restore --verbosity normal --logger "trx;LogFileName=test-results.trx"
     
    #  - name: Generate Test Report
    #    if: always()
    #    uses:  dorny/test-reporter@v1
    #    with:
    #      name: Unit Tests
    #      path: '${{ env.TEST_DIR }}/TestResults/*.trx'
    #      reporter: dotnet-trx

     - name: Publish Update Function
       run: dotnet publish "${{ env.SRC_DIR }}/UpdateDevices" --configuration ${{ env.CONFIGURATION }} --no-build --output "${{ env.AZURE_UPDATE_FUNCTION_PACKAGE_PATH }}"

     - name: Publish App
       run: dotnet publish "${{ env.SRC_DIR }}/DelegationStation" --configuration ${{ env.CONFIGURATION }} --no-build --output "${{ env.AZURE_APP_PACKAGE_PATH }}"

     - name: Upload Update Function Artifact
       uses: actions/upload-artifact@v3
       with:
         name: ${{ env.AZURE_UPDATE_FUNCTION_PKG_NAME}}
         path: ${{ env.AZURE_UPDATE_FUNCTION_PACKAGE_PATH }}

     - name: Upload WebApp Artifact
       uses: actions/upload-artifact@v3
       with:
         name: ${{ env.AZURE_APP_PKG_NAME}}
         path: ${{ env.AZURE_APP_PACKAGE_PATH }}


  #  deploy:
  #    runs-on: ubuntu-latest
  #    needs: build-test

  #    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
  #    defaults:
  #      run:
  #        shell: bash

  #    steps:

  #    - name: Download Artifact
  #      uses: actions/download-artifact@v3
  #      with:
  #        name: ${{ env.AZURE_UPDATE_FUNCTION_PKG_NAME}}
  #        path: ${{ env.AZURE_UPDATE_FUNCTION_PACKAGE_PATH }}

  #     # Logging in via Linux command line instead of using 
  #     # GitHub action due to bug in azure/login action with 
  #     # some client secrets
  #    - name: Azure Login 
  #      run: |
  #           az cloud set --name "${{ env.AZ_ENVIRONMENT }}"
  #           az login --service-principal -u ${{ env.ARM_CLIENT_ID }} -p=${{ env.ARM_CLIENT_SECRET}} --tenant ${{ env.ARM_TENANT_ID}} 

  #    - name: Deploy to Azure Function App
  #      uses: Azure/functions-action@v1
  #      with:
  #        app-name: ${{ env.AZURE_UPDATE_FUNCTION_NAME }}
  #        package: ${{ env.AZURE_UPDATE_FUNCTION_PACKAGE_PATH }}

