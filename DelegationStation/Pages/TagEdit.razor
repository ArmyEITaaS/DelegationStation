@page "/TagEdit/{Id}"
@using DelegationStationShared.Models;
@using DelegationStation.Services;

@inject ILogger<TagEdit> logger
@inject IDeviceTagDBService deviceTagDBService
@inject IGraphService graphService
@inject IConfiguration config
@inject NavigationManager nav
@inject IRoleDBService roleDBService


@attribute [Authorize]

<h3>Tag Edit</h3>

<AuthorizeView Context="authContext">
    <Authorized>
        @if (Id == null)
        {
            <h3>Error in navigation path</h3>
        }
        else if (userRole.IsDefaultRole())
        {
            <h3>Not authorized</h3>
        }
        else if (tag != null)
        {
            <h3>@tag.Name</h3>
            <h4>@tag.Description</h4>
            <br />
            <hr />
            <label>Name:</label>
            <InputText @bind-Value=tag.Name class="form-control"></InputText>
            <label>Description:</label>
            <InputTextArea @bind-Value=tag.Description class="form-control"></InputTextArea>
            <br />
            <hr />
            <div class="container">
                <h2>Assigned Groups</h2>
                <table class="table table-responsive">
                    <thead>
                        <tr>
                            <th>Role</th>
                            <th>Security Group Name</th>
                            <th>Security Group Id</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (RoleDelegation r in tag.RoleDelegations)
                        {
                            <tr>
                                <td>@r.Role.Name</td>
                                <td>@r.SecurityGroupName</td>
                                <td>@r.SecurityGroupId</td>
                                <td><button type="button" class="btn btn-danger @(userRole.IsAdminRole() ? "" : "disabled")" @onclick=@(() => tag.RoleDelegations.Remove(r))><span class="oi oi-trash"></span> Delete</button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            @if (userRole.IsAdminRole())
            {
                <EditForm Model="@roleDelegation" OnValidSubmit="AddRoleDelegation" class="form-control mb-3">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    Role:
                    <select @onchange=@((e) => UpdateRole(e)) class="form-select">
                        <option></option>
                        @foreach (Role r in roles)
                        {
                            <option value="@r.Id">@r.Name</option>
                        }
                    </select>
                    <ValidationMessage For=@(() => roleDelegation.Role) />

                    <label class="form-label">Security Group Id:</label>
                    <InputText @bind-Value=roleDelegation.SecurityGroupId class="form-control mb-3" @onfocusout=@((e) => GetRoleDelegationName(e))></InputText>
                    <ValidationMessage For=@(() => roleDelegation.SecurityGroupId) />
                    @if (!string.IsNullOrEmpty(roleDelegation.SecurityGroupName))
                    {
                        <p class="mt-2 mb-2">@roleDelegation.SecurityGroupName</p>
                    }
                    else
                    {
                        <p class="mt-2 mb-2">Input a valid security group Id</p>
                    }

                    <input type="submit" class="btn btn-primary mb-3 @(string.IsNullOrEmpty(roleDelegation.SecurityGroupName) ? "disabled" : "")" value="Add Role" />
                </EditForm>
            }

            <div class="container">
                <h2>Actions on Enrollment</h2>
                <table class="table table-responsive">
                    <thead>
                        <tr>
                            <th>Action Type</th>
                            <th>Name</th>
                            <th>Value</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (DeviceUpdateAction a in tag.UpdateActions)
                        {
                            <tr class="">
                                <td>@a.ActionType</td>
                                <td>@a.Name</td>
                                <td>@a.Value</td>
                                <td><button type="button" class="btn btn-danger @(ActionAllowed(a) ? "" : "disabled")" @onclick=@(() => tag.UpdateActions.Remove(a))><span class="oi oi-trash"></span> Delete</button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            @if (!userRole.IsDefaultRole())
            {
                <EditForm EditContext="deviceUpdateActionEditContext" OnValidSubmit="AddDeviceUpdateAction" class="form-control mb-3">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    Update Action:
                    <InputSelect @bind-Value=deviceUpdateAction.ActionType
                                 class="form-select">

                        @foreach (DeviceUpdateActionType t in Enum.GetValues(typeof(DeviceUpdateActionType)))
                        {
                            if ((t == DeviceUpdateActionType.Group && userRole.SecurityGroups) ||
                            (t == DeviceUpdateActionType.AdministrativeUnit && userRole.AdministrativeUnits) ||
                            (t == DeviceUpdateActionType.Attribute && userRole.Attributes.Count > 0))
                            {
                                <option value="@t">@t</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For=@(() => deviceUpdateAction.ActionType) />
                    @if (deviceUpdateAction.ActionType == DeviceUpdateActionType.Attribute)
                    {
                        <label class="form-label">Attribute name:</label>
                        <InputSelect @bind-Value=deviceUpdateAction.Name class="form-select">
                            @{
                                foreach (AllowedAttributes t in Enum.GetValues(typeof(AllowedAttributes)))
                                {
                                    if (t == AllowedAttributes.All)
                                    {
                                        continue;
                                    }
                                    if (AttributeAllowed(t))
                                    {
                                        <option value="@t">@t</option>
                                    }
                                }
                            }
                        </InputSelect>
                        <label class="form-label">Attribute value:</label>
                        <InputText @bind-Value=deviceUpdateAction.Value class="form-control"></InputText>
                    }
                    else if (deviceUpdateAction.ActionType == DeviceUpdateActionType.AdministrativeUnit)
                    {
                        <br />
                        <label class="form-label">Administrative Unit Id:</label>
                        <InputText @bind-Value=deviceUpdateAction.Value class="form-control"></InputText>
                    }
                    else if (deviceUpdateAction.ActionType == DeviceUpdateActionType.Group)
                    {

                        <br />
                        <label class="form-label">Security Group Id: </label>
                        <InputText class="form-control" @bind-Value=deviceUpdateAction.Value @onfocusout=@((e) => GetActionSecurityGroupName(e))></InputText>
                        @if (!string.IsNullOrEmpty(deviceUpdateAction.Name))
                        {
                            <p class="mt-2 mb-2">@deviceUpdateAction.Name</p>
                        }
                        else
                        {
                            <p class="mt-2 mb-2">Input a valid security group Id</p>
                        }
                    }
                    <br />

                    <input type="submit" class="btn btn-primary mb-3 @((string.IsNullOrEmpty(deviceUpdateAction.Name) && deviceUpdateAction.ActionType == DeviceUpdateActionType.Group) || (string.IsNullOrEmpty(deviceUpdateAction.Value) && deviceUpdateAction.ActionType == DeviceUpdateActionType.Attribute) || (string.IsNullOrEmpty(deviceUpdateAction.Name) && deviceUpdateAction.ActionType == DeviceUpdateActionType.AdministrativeUnit) ? "disabled" : "")" value="Add Action" />
                </EditForm>

            }

            @if (!string.IsNullOrEmpty(tagErrorMessage))
            {
                <p class="text-danger">@tagErrorMessage</p>
            }
            @if (!string.IsNullOrEmpty(tagSuccessMessage))
            {
                <p class="text-success">@tagSuccessMessage</p>
            }
            <button type="button" class="btn btn-success" @onclick=@(() => Save())>Save</button>
            <button type="button" class="btn btn-danger" @onclick=@(() => Delete())>Delete</button>
        }
    </Authorized>
        
    <NotAuthorized>
        <p>Not Authorized</p>
    </NotAuthorized>
</AuthorizeView>




@code {
    [CascadingParameter]
    public Task<AuthenticationState>? AuthState { get; set; }
    [Parameter] public string? Id { get; set; }

    public List<string> pGroups
    {
        get {
            return groups;
        }
        set {
        }
    }

    private AuthenticationState? authState;
    private List<string> groups = new List<string>();
    private List<Role> roles = new List<Role>();
    private Role userRole = (new Role()).GetDefaultRole();
    private DeviceTag tag = new DeviceTag();
    private RoleDelegation roleDelegation = new RoleDelegation();
    private DeviceUpdateAction deviceUpdateAction = new DeviceUpdateAction();
    private string defaultGroup = "";
    private string userName = "";
    private string userId = "";
    private string deviceUpdateActionsValidationMessage = "";
    private string addDeviceUpdateState = "";
    private string tagErrorMessage = "";
    private string tagSuccessMessage = "";
    private EditContext? deviceUpdateActionEditContext;
    private string userMessage = "";



    protected override async Task OnInitializedAsync()
    {
        deviceUpdateActionEditContext = new EditContext(deviceUpdateAction);
        deviceUpdateActionEditContext.OnFieldChanged += DeviceUpdateAction_OnFieldChanged;


        defaultGroup = config.GetSection("DefaultAdminGroupObjectId").Value ?? "";
        if (AuthState != null)
        {
            authState = await AuthState;
            userName = authState?.User.Claims.Where(c => c.Type == "name").Select(c => c.Value.ToString()).FirstOrDefault() ?? "";
            userId = authState?.User.Claims.Where(c => c.Issuer == "http://schemas.microsoft.com/identity/claims/objectidentifier").Select(c => c.Value.ToString()).FirstOrDefault() ?? "";
        }
        await GetTag();
        UpdateClaims();
        UpdateUserRole();
        await UpdateRoleDelegationGroups();
        await GetRolesAsync();
    }

    private async Task GetRolesAsync()
    {        
        try
        {
            roles = await roleDBService.GetRolesAsync();
        }
        catch (Exception ex)
        {
            logger.LogError($"Failed to get Roles.\n{ex.Message}");
        }
    }


    private void DeviceUpdateAction_OnFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        deviceUpdateActionEditContext?.Validate();
        if(e.FieldIdentifier.FieldName == nameof(deviceUpdateAction.ActionType))
        {
            DeviceUpdateActionTypeChanged(deviceUpdateAction.ActionType.ToString());
        }
    }

    private void DeviceUpdateActionTypeChanged(string value)
    {
        DeviceUpdateActionType a = deviceUpdateAction.ActionType;
        deviceUpdateAction = new DeviceUpdateAction();
        deviceUpdateAction.ActionType = a;
    }

    private async Task GetTag()
    {
        try
        {
            if (Id != null)
            {
                tag = await deviceTagDBService.GetDeviceTagAsync(Id);
            }
        }
        catch (Exception ex)
        {
            logger.LogError($"Failed to find Device Tag {Id} to Edit.\n{ex.Message}");
        }
    }

    private void UpdateUserRole()
    {
        if(string.IsNullOrEmpty(defaultGroup))
        {
            userRole = userRole.GetDefaultRole();
        }
        else if(groups.Contains(defaultGroup))
        {
            userRole = userRole.GetAdminRole();
        }
        else
        {
            userRole = userRole.GetRole(groups, tag);
        }
        StateHasChanged();
    }

    private void UpdateClaims()
    {
        groups = new List<string>();
        var roleClaims = authState?.User.Claims.Where(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role" || c.Type == "roles");
        roleClaims = roleClaims ?? new List<System.Security.Claims.Claim>();
        foreach (var c in roleClaims)
        {
            groups.Add(c.Value);
        }
    }

    private bool ActionAllowed(DeviceUpdateAction action)
    {
        if (userRole == userRole.GetDefaultRole())
        {
            return false;
        }

        if(userRole == userRole.GetAdminRole())
        {
            return true;
        }        

        if(action.ActionType == DeviceUpdateActionType.Group && userRole.SecurityGroups)
        {
            return true;
        }

        if (action.ActionType == DeviceUpdateActionType.AdministrativeUnit && userRole.AdministrativeUnits)
        {
            return true;
        }

        if((action.ActionType == DeviceUpdateActionType.Attribute && userRole.Attributes.Count() > 0))
        {
            return true;
        }

        return false;
    }

    private bool AttributeAllowed(AllowedAttributes e)
    {
        if ((userRole.Attributes.Where(a => a.ToString() == e.ToString()).Count() > 0) ||
            (userRole.Attributes.Where(a => a == AllowedAttributes.All).Count() > 0))
        {
            return true;
        }
        return false;
    }

    private async Task GetRoleDelegationName(EventArgs? e)
    {
        if(string.IsNullOrEmpty(roleDelegation.SecurityGroupId))
        {
            return;
        }

        if (!System.Text.RegularExpressions.Regex.Match(roleDelegation.SecurityGroupId, "^([0-9A-Fa-f]{8}[-]?[0-9A-Fa-f]{4}[-]?[0-9A-Fa-f]{4}[-]?[0-9A-Fa-f]{4}[-]?[0-9A-Fa-f]{12})$").Success)
        {
            return;
        }

        try
        {
            string name = await graphService.GetSecurityGroupName(roleDelegation.SecurityGroupId);
            roleDelegation.SecurityGroupName = name;
        }
        catch (Exception ex)
        {
            deviceUpdateActionsValidationMessage = $"Failed to get Security Group Name for {roleDelegation.SecurityGroupId}.\n{ex.Message}";
            logger.LogWarning(deviceUpdateActionsValidationMessage);
            return;
        }
    }

    private async Task GetActionSecurityGroupName(EventArgs? e)
    {
        if (string.IsNullOrEmpty(deviceUpdateAction.Value))
        {
            return;
        }

        if (!System.Text.RegularExpressions.Regex.Match(deviceUpdateAction.Value, "^([0-9A-Fa-f]{8}[-]?[0-9A-Fa-f]{4}[-]?[0-9A-Fa-f]{4}[-]?[0-9A-Fa-f]{4}[-]?[0-9A-Fa-f]{12})$").Success)
        {
            return;
        }

        try
        {
            string name = await graphService.GetSecurityGroupName(deviceUpdateAction.Value);
            deviceUpdateAction.Name = name;
        }
        catch (Exception ex)
        {
            deviceUpdateActionsValidationMessage = $"Failed to get Security Group Name for {deviceUpdateAction.Value}.\n{ex.Message}";
            logger.LogWarning(deviceUpdateActionsValidationMessage);
            return;
        }
    }

    private void AddRoleDelegation()
    {
        if (userRole.IsAdminRole() == false)
        {
            deviceUpdateActionsValidationMessage = $"'{userName}' {userId} attempted to update Tag '{tag.Name}' {tag.Id} without Admin rights";
            logger.LogWarning(deviceUpdateActionsValidationMessage);
            return;
        } 

        try
        {
            tag.RoleDelegations.Add(roleDelegation);
            roleDelegation = new RoleDelegation();
        }
        catch (Exception ex)
        {
            deviceUpdateActionsValidationMessage = $"Failed to get Security Group Name for {roleDelegation.SecurityGroupId}.\n{ex.Message}";
            logger.LogWarning(deviceUpdateActionsValidationMessage);
            return;
        }
    }

    private async void AddDeviceUpdateAction(EditContext editContext)
    {
        addDeviceUpdateState = "disabled";
        deviceUpdateAction.Name = deviceUpdateAction.Name.Trim();
        deviceUpdateAction.Value = deviceUpdateAction.Value.Trim();

        if (userRole.IsAdminRole() == false)
        {
            deviceUpdateActionsValidationMessage = $"'{userName}' {userId} attempted to update Tag '{tag.Name}' {tag.Id} without Admin rights";
            logger.LogWarning(deviceUpdateActionsValidationMessage);
            addDeviceUpdateState = "";
            return;
        }

        if (deviceUpdateAction.ActionType == DeviceUpdateActionType.Group && !System.Text.RegularExpressions.Regex.Match(deviceUpdateAction.Value, "^([0-9A-Fa-f]{8}[-]?[0-9A-Fa-f]{4}[-]?[0-9A-Fa-f]{4}[-]?[0-9A-Fa-f]{4}[-]?[0-9A-Fa-f]{12})$").Success)
        {
            deviceUpdateActionsValidationMessage = $"When using a group update action value must be a valid GUID";
            addDeviceUpdateState = "";
            return;
        }

        if (deviceUpdateAction.ActionType == DeviceUpdateActionType.Group)
        {
            try
            {
                string groupName = await graphService.GetSecurityGroupName(deviceUpdateAction.Value);
                if(string.IsNullOrEmpty(groupName))
                {
                    deviceUpdateActionsValidationMessage = $"Failed to find group id {deviceUpdateAction.Value}";
                    addDeviceUpdateState = "";
                    return;
                }
                deviceUpdateAction.Name = groupName;
            }
            catch (Exception ex)
            {
                Guid g = Guid.NewGuid();
                deviceUpdateActionsValidationMessage = $"Failed to find group id {deviceUpdateAction.Value}\nCorrelation Id: {g.ToString()}";
                logger.LogError($"Failed to find group id {deviceUpdateAction.Value} when adding to Tag {tag.Id}.\nCorrelation Id: {g.ToString()}\n{ex.Message}");
                addDeviceUpdateState = "";
                return;
            }
        }


        deviceUpdateActionsValidationMessage = "";
        tag.UpdateActions.Add(deviceUpdateAction);
        deviceUpdateAction = new DeviceUpdateAction();        
        addDeviceUpdateState = "";
    }

    private async Task Save()
    {
        Guid g = Guid.NewGuid();
        if (userRole.IsAdminRole())
        {
            try
            {
                await deviceTagDBService.AddOrUpdateDeviceTagAsync(tag);                
                tagSuccessMessage = $"Saved tag. Correlation Id:{g.ToString()}";
                tagErrorMessage = "";
                logger.LogInformation($"'{userName}' {userId} saved Tag '{tag.Name}' {tag.Id}.\nCorrelation Id:{g.ToString()}");
            }
            catch(Exception ex)
            {
                tagSuccessMessage = "";
                tagErrorMessage = $"'{userName}' {userId} unable to save Tag {tag.Id}. Correlation Id:{g.ToString()}";
                logger.LogError($"'{userName}' {userId} unable to save Tag {tag.Id}.\n{ex.Message}");
            }            
        }
        else
        {
            tagSuccessMessage = "";
            tagErrorMessage = $"'{userName}' {userId} is not an admin for Tag {tag.Id}. Correlation Id:{g.ToString()}";
            logger.LogWarning($"'{userName}' {userId} attempted to save Tag '{tag.Name}' {tag.Id} without Admin rights");
        }
    }

    private async Task Delete()
    {
        if (userRole.IsAdminRole())
        {
            try
            {
                await deviceTagDBService.DeleteDeviceTagAsync(tag);
                nav.NavigateTo("/Tags");
            }
            catch (Exception ex)
            {
                logger.LogError($"Unable to delete Tag {tag.Id}.\n{ex.Message}");
            }
        }
        else
        {
            logger.LogWarning($"'{userName}' {userId} attempted to save Tag '{tag.Name}' {tag.Id}");
        }
    }

    private async Task GetGroupForNewUpdateAction(KeyboardEventArgs e)
    {
        try
        {
            if (deviceUpdateAction.ActionType == DeviceUpdateActionType.Group && System.Text.RegularExpressions.Regex.Match(deviceUpdateAction.Value.Trim(), "^([0-9A-Fa-f]{8}[-]?[0-9A-Fa-f]{4}[-]?[0-9A-Fa-f]{4}[-]?[0-9A-Fa-f]{4}[-]?[0-9A-Fa-f]{12})$").Success)
            {
                deviceUpdateAction.Name = await graphService.GetSecurityGroupName(deviceUpdateAction.Value);
            }
            else
            {
                deviceUpdateAction.Name = "Not valid security group Id";
            }
        }
        catch(Exception ex)
        {
            logger.LogError($"Unable to get groups for update actions.\n{ex.Message}");
        }                
    }

    private async Task UpdateRoleDelegationGroups()
    {
        foreach(RoleDelegation r in tag.RoleDelegations)
        {
            try
            {
                if (System.Text.RegularExpressions.Regex.Match(r.SecurityGroupId, "^([0-9A-Fa-f]{8}[-]?[0-9A-Fa-f]{4}[-]?[0-9A-Fa-f]{4}[-]?[0-9A-Fa-f]{4}[-]?[0-9A-Fa-f]{12})$").Success)
                {
                    r.SecurityGroupName = await graphService.GetSecurityGroupName(r.SecurityGroupId);
                }
            }
            catch (Exception ex)
            {
                logger.LogError($"Unable to get group {r.SecurityGroupId} for RoleDelegation {r.Id} under Tag {tag.Id}.\n{ex.Message}");
            }
        }
    }

    private async Task UpdateUpdateActionGroups()
    {
        foreach (DeviceUpdateAction action in tag.UpdateActions)
        {
            try
            {
                if (System.Text.RegularExpressions.Regex.Match(action.Value, "^([0-9A-Fa-f]{8}[-]?[0-9A-Fa-f]{4}[-]?[0-9A-Fa-f]{4}[-]?[0-9A-Fa-f]{4}[-]?[0-9A-Fa-f]{12})$").Success)
                {
                    action.Name = await graphService.GetSecurityGroupName(action.Value);
                }
            }
            catch (Exception ex)
            {
                logger.LogError($"Unable to get group {action.Value} for UpdateAction {action.Id} under Tag {tag.Id}.\n{ex.Message}");
            }
        }
    }

    private void UpdateRole(ChangeEventArgs e)
    {
        var value = ((ChangeEventArgs)e).Value?.ToString();
        if(!string.IsNullOrEmpty(value))
        {
            Role? r = roles.Where(r => r.Id == Guid.Parse(value)).FirstOrDefault();
            if(r != null)
            {
                roleDelegation.Role = r;
            }
        }
    }
}
