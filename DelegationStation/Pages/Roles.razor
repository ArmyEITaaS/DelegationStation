@page "/Roles"
@using Microsoft.AspNetCore.Components.Authorization

@inject Services.IRoleDBService roleDBService
@inject NavigationManager nav
@inject ILogger<RoleEdit> logger

@attribute [Authorize]



<h3>Roles</h3>

<AuthorizeView>
    <Authorized>
        @if (roles.Count > 0)
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Editable Attributes</th>
                        <th>Edit Security Groups</th>
                        <th>Edit Administrative Units</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Role role in roles)
                    {
                        <tr>
                            <td class="clickable" @onclick=@(() => nav.NavigateTo($"/Role/{role.Id.ToString()}"))>@role.Name</td>
                            <td class="clickable" @onclick=@(() => nav.NavigateTo($"/Role/{role.Id.ToString()}"))>
                                @foreach (AllowedAttributes attr in role.Attributes.OrderBy(a => a))
                                {
                                    <p>@attr</p>
                                }
                            </td>
                            <td class="clickable" @onclick=@(() => nav.NavigateTo($"/Role/{role.Id.ToString()}"))>
                                @if (role.SecurityGroups)
                                {
                                    <span>Yes</span>
                                }
                                else
                                {
                                    <span>No</span>
                                }
                            </td>
                            <td class="clickable" @onclick=@(() => nav.NavigateTo($"/Role/{role.Id.ToString()}"))>
                                @if (role.AdministrativeUnits)
                                {
                                    <span>Yes</span>
                                }
                                else
                                {
                                    <span>No</span>
                                }
                            </td>
                            <td class="align-middle">
                                <button type="button" class="btn btn-danger text-nowrap" @onclick=@(() => RemoveRole(role))><span class="oi oi-trash d-sm-none"></span><section class="d-none d-sm-block"><span class="oi oi-trash"></span> Delete</section></button>
                            </td>
                        </tr>

                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No roles found</p>
        }
        <button class="btn btn-secondary" type="button" @onclick="@(() => nav.NavigateTo("/Role/" + Guid.Empty.ToString()))">New Role</button>
    </Authorized>
    <NotAuthorized>
        <p>Not Authorized</p>
    </NotAuthorized>
</AuthorizeView>

@if (!string.IsNullOrEmpty(userMessage))
{
    @if (userMessage.ToLower().Contains("error"))
    {
        <div class="alert alert-danger" role="alert">
            @userMessage
        </div>
    }
    else
    {
        <div class="alert alert-success" role="alert">
            @userMessage
        </div>
    }
}
<div class="modalBackdrop @showClass"></div>
<div class="modal-dialog modal-dialog-centered @showClass" id="AreYouSure" tabindex="-1" aria-labelledby="AreYouSure" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Are you sure?</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="(() => Close())"></button>
            </div>
            <div class="modal-body">
                Role and access will be permanently deleted.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="(() => Close())">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="(() => DeleteRole())">Delete</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Role> roles = new List<Role>();
    private string userMessage = "";
    private bool popupIsVisible = false;
    private string showClass = "hideModal";
    private bool userConfirmed = false;
    private Role deleteRole = new Role() { Id = Guid.Empty };

    protected override async Task OnInitializedAsync()
    {
        Guid c = Guid.NewGuid();
        try
        {
            roles = await roleDBService.GetRolesAsync();
        }
        catch (Exception ex)
        {
            string message = $"Correlation Id: {c.ToString()}\nError retrieving roles.";
            logger.LogError(ex, message);
            userMessage = message;
        }
    }

    private void RemoveRole(Role role)
    {
        deleteRole = role;
        Show();
    }

    private void DeleteRole()
    {
        Close();

        if(deleteRole.Id == Guid.Empty)
        {
            return;
        }

        Guid c = Guid.NewGuid();
        try
        {
            roleDBService.DeleteRoleAsync(deleteRole);
            roles.Remove(deleteRole);
            string message = $"Correlation Id: {c.ToString()}\nRole {deleteRole.Name} deleted successfully";
            userMessage = message;
            logger.LogInformation(message);
        }
        catch (Exception ex)
        {
            string message = $"Error deleting role {deleteRole.Name}.";
            logger.LogError(ex, message);
            userMessage = message;
        }
        deleteRole = new Role() { Id = Guid.Empty };
    }

    private void Show()
    {
        showClass = "showModal show";
    }

    private void Close()
    {
        showClass = "hideModal";
    }
}
