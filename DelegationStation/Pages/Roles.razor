@page "/Roles"
@using Microsoft.AspNetCore.Components.Authorization

@inject Services.IRoleDBService roleDBService
@inject NavigationManager nav
@inject ILogger<RoleEdit> logger
@inject IConfiguration config
@inject IHttpContextAccessor httpContextAccessor
@inject IAuthorizationService authorizationService


@attribute [Authorize]



<h3>Roles</h3>

<AuthorizeView Policy="DelegationStationAdmin">
    <Authorized>

        @if (roles.Count > 0)
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Editable Attributes</th>
                        <th>Edit Security Groups</th>
                        <th>Edit Administrative Units</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Role role in roles)
                    {
                        <tr>
                            <td class="clickable" @onclick=@(() => nav.NavigateTo($"/Role/{role.Id.ToString()}"))>@role.Name</td>
                            <td class="clickable" @onclick=@(() => nav.NavigateTo($"/Role/{role.Id.ToString()}"))>
                                @foreach (AllowedAttributes attr in role.Attributes.OrderBy(a => a))
                                {
                                    <p>@attr</p>
                                }
                            </td>
                            <td class="clickable" @onclick=@(() => nav.NavigateTo($"/Role/{role.Id.ToString()}"))>
                                @if (role.SecurityGroups)
                                {
                                    <span>Yes</span>
                                }
                                else
                                {
                                    <span>No</span>
                                }
                            </td>
                            <td class="clickable" @onclick=@(() => nav.NavigateTo($"/Role/{role.Id.ToString()}"))>
                                @if (role.AdministrativeUnits)
                                {
                                    <span>Yes</span>
                                }
                                else
                                {
                                    <span>No</span>
                                }
                            </td>
                            <td class="align-middle">
                                <button type="button" class="btn btn-danger text-nowrap" @onclick=@(() => RemoveRole(role))><span class="oi oi-trash d-sm-none"></span><section class="d-none d-sm-block"><span class="oi oi-trash"></span> Delete</section></button>
                            </td>
                        </tr>

                    }
                </tbody>
            </table>
        }
        else if (loading)
        {
            <p>Loading...</p>
        }
        else
        {
            <p>No roles found</p>
        }


        <button class="btn btn-secondary" type="button" @onclick="@(() => nav.NavigateTo("/Role/" + Guid.Empty.ToString()))">New Role</button>
    </Authorized>
    <NotAuthorized>
        <h3>Not Authorized</h3>
        <p>User is unable to view, create, or edit roles.</p>
    </NotAuthorized>
</AuthorizeView>
<br />
<br />

<DisplayMessage Message="@userMessage" />

<ConfirmMessage MessageBody=@((MarkupString) "This will permanently delete the role and any delegations.") ConfirmAction="@(() => DeleteRole())" @ref="ConfirmDelete" />

@code {
    [CascadingParameter]
    public Task<AuthenticationState>? AuthState { get; set; }
    private System.Security.Claims.ClaimsPrincipal user = new System.Security.Claims.ClaimsPrincipal();
    private string userId = string.Empty;
    private string userName = string.Empty;

    private List<Role> roles = new List<Role>();
    private bool loading = true;

    private ConfirmMessage? ConfirmDelete;

    private string userMessage = "";
    // private bool popupIsVisible = false;
    private string showClass = "hideModal";
    private bool userConfirmed = false;
    private Role deleteRole = new Role() { Id = Guid.Empty };

    protected override async Task OnInitializedAsync()
    {
        if (AuthState is not null)
        {
            var authState = await AuthState;
            user = authState?.User ?? new System.Security.Claims.ClaimsPrincipal();
            userName = user.Claims.Where(c => c.Type == "name").Select(c => c.Value.ToString()).FirstOrDefault() ?? "";
            userId = user.Claims.Where(c => c.Type == "http://schemas.microsoft.com/identity/claims/objectidentifier").Select(c => c.Value.ToString()).FirstOrDefault() ?? "";
        }

        Guid c = Guid.NewGuid();
        try
        {
            roles = await roleDBService.GetRolesAsync();
        }
        catch (Exception ex)
        {
            string message = $"Correlation Id: {c.ToString()}\nError retrieving roles.";
            logger.LogError(ex, message);
            userMessage = message;
        }
        finally
        {
            loading = false;
        }
    }

    private void RemoveRole(Role role)
    {
        Guid c = Guid.NewGuid();

        if (authorizationService.AuthorizeAsync(user, "DelegationStationAdmin").Result.Succeeded == false)
        {
            string message = $"Error deleting role {deleteRole.Name}.\nCorrelation Id: {c.ToString()}. Insufficient access.";
            logger.LogError($"{message}\nUser: {userName} {userId}");
            userMessage = message;
            return;
        }
        deleteRole = role;
        Show();
    }

    private void DeleteRole()
    {
        Guid c = Guid.NewGuid();
        if (deleteRole.Id == Guid.Empty)
        {
            return;
        }

        if (authorizationService.AuthorizeAsync(user, "DelegationStationAdmin").Result.Succeeded == false)
        {
            string message = $"Error deleting role {deleteRole.Name}.\nCorrelation Id: {c.ToString()}. Insufficient access.";
            logger.LogError($"{message}\nUser: {userName} {userId}");
            userMessage = message;
            return;
        }

        try
        {
            roleDBService.DeleteRoleAsync(deleteRole);
            roles.Remove(deleteRole);
            string message = $"Correlation Id: {c.ToString()}\nRole {deleteRole.Name} deleted successfully";
            userMessage = "";
            logger.LogInformation($"{message}\nUser: {userName} {userId}");
        }
        catch (Exception ex)
        {
            string message = $"Error deleting role {deleteRole.Name}.\nCorrelation Id: {c.ToString()}";
            logger.LogError(ex, $"{message}\nUser: {userName} {userId}");
            userMessage = message;
        }
        deleteRole = new Role() { Id = Guid.Empty };
        StateHasChanged();
    }

    private void Show()
    {
        ConfirmDelete?.Show();
    }
}
