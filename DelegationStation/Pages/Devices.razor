@page "/"
@using DelegationStation.Services;
@using DelegationStationShared.Models;


@inject IDeviceTagDBService deviceTagDBService
@inject IDeviceDBService deviceDBService
@inject ILogger<Tags> logger
@inject NavigationManager nav
@inject IAuthorizationService authorizationService

@attribute [Authorize]

<h3>Devices</h3>

<AuthorizeView Context="authContext">
    <Authorized>
        
        <table class="table table-responsive">
            <thead>
                <tr>
                    <th>Make</th>
                    <th>Model</th>
                    <th>Serial Number</th>
                    <th>Tag</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if(devicesLoading)
                {
                    <tr>
                        <td colspan="4">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </td>
                    </tr>
                }
                else if (devices.Count == 0)
                {
                    <tr>
                        <td colspan="4">No devices found.</td>
                    </tr>
                }
                else
                {
                    @foreach (Device device in devices)
                    {
                        <tr>
                            <td>@device.Make</td>
                            <td>@device.Model</td>
                            <td>@device.SerialNumber</td>
                            <td>
                                @foreach (string t in device.Tags)
                                {
                                    <span class="badge bg-secondary">@deviceTags.Where(tag => tag.Id.ToString() == t).Select(tag => tag.Name.ToString()).FirstOrDefault()</span>
                                    <br />
                                }
                            </td>
                            <td class="align-middle">
                                <button type="button" class="btn btn-danger btn-sm text-nowrap" @onclick=@(() => RemoveDevice(device))>
                                    <span class="oi oi-trash d-sm-none"></span><section class="d-none d-sm-block"><span class="oi oi-trash"></span> Delete</section></button>

                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        <div class="row mb-4">
            <div class="col">
                <input type="text" @bind="searchDevice.Make" class="form-control" placeholder="Make" />
            </div>
            <div class="col">
                <input type="text" @bind="searchDevice.Model" class="form-control" placeholder="Model" />
            </div>
            <div class="col">
                <input type="text" @bind="searchDevice.SerialNumber" class="form-control" placeholder="Serial Number" />
            </div>
            <div class="col">
                <button type="button" class="btn btn-success" @onclick=@(() => GetDevicesSearch())>Search</button>
            </div>
        </div>
        <EditForm Model="@newDevice" OnValidSubmit="AddDevice" class="form-control mb-5">
            <DataAnnotationsValidator />
            <h4>Add device</h4>
            @if ((deviceAddValidationMessage.Value != null) && !deviceAddValidationMessage.Value.Equals(""))
            {
                <p class="text-danger">@deviceAddValidationMessage</p>
            }
            <div class="mb-3">
                <label for="DeviceMake" class="form-label">Device Make</label>
                <InputText @bind-Value=newDevice.Make class="form-control" id="DeviceMake"></InputText>
                <ValidationMessage For=@(() => newDevice.Make) />
            </div>
            <div class="mb-3">
                <label for="DeviceModel" class="form-label">Device Model</label>
                <InputText @bind-Value=newDevice.Model class="form-control" id="DeviceModel"></InputText>
                <ValidationMessage For=@(() => newDevice.Model) />
            </div>
            <div class="mb-3">
                <label for="SerialNumber" class="form-label">Serial Number</label>
                <InputText @bind-Value=newDevice.SerialNumber class="form-control" id="SerialNumber"></InputText>
                <ValidationMessage For=@(() => newDevice.SerialNumber) />
            </div>
            <div class="mb-3">
                <label for="Tags" class="form-label">Tags:</label>
                <input @bind=tagSearch @bind:event="oninput" class="form-control" placeholder="Filter tags">
                @foreach (DeviceTag tag in deviceTags.Where(t => t.Name.ToLower().Contains(tagSearch.ToLower())))
                {
                    <div class="form-check form-switch mt-2">
                        <input class="form-check-input" type="checkbox" @onchange=@(() => AddRemoveTag(tag)) checked="@((newDevice.Tags.Where(t => t == tag.Id.ToString()).Count() > 0) ? "checked" : null)">
                        <label class="form-check-label" for="flexSwitchCheckDefault">@tag.Name</label>
                    </div>
                }
            </div>

            <input type="submit" class="btn btn-primary mb-3" value="Add" />
        </EditForm>

        @if (!string.IsNullOrEmpty(userMessage))
        {
            @if (userMessage.ToLower().Contains("error"))
            {
                <div class="alert alert-danger" role="alert">
                    @userMessage
                </div>
            }
            else
            {
                <div class="alert alert-success" role="alert">
                    @userMessage
                </div>
            }
        }
    </Authorized>
    <NotAuthorized>
        <p>Not Authorized</p>
    </NotAuthorized>
</AuthorizeView>

<ConfirmMessage MessageBody=@confirmMessage ConfirmAction="@(() => DeleteDevice())" @ref="ConfirmDelete" />




@code {
  [CascadingParameter]
  public Task<AuthenticationState>? AuthState { get; set; }
  private System.Security.Claims.ClaimsPrincipal user = new System.Security.Claims.ClaimsPrincipal();
  private string userId = string.Empty;
  private string userName = string.Empty;

    private List<string> groups = new List<string>();
    private List<Device> devices = new List<Device>();
    private List<DeviceTag> deviceTags = new List<DeviceTag>();
    private Device newDevice = new Device();
    private Role userRole = new Role() { Id = Guid.Empty, Name = "None", Attributes = new List<AllowedAttributes>() {}, SecurityGroups = false, AdministrativeUnits = false };
    private string tagSearch = "";
    private MarkupString deviceAddValidationMessage = new MarkupString("");
    private int pageSize = 10;
    private int currentPage = 0;
    private string search = "";
    private Device searchDevice = new Device();
    private bool devicesLoading = true;
    private string userMessage = string.Empty;

  private ConfirmMessage? ConfirmDelete;
  private Device deleteDevice = new Device() { Id = Guid.Empty };
  private MarkupString confirmMessage = new MarkupString("");

  protected override async Task OnInitializedAsync()
  {
    if (AuthState is not null)
    {
      var authState = await AuthState;
      user = authState?.User ?? new System.Security.Claims.ClaimsPrincipal();
      userName = user.Claims.Where(c => c.Type == "name").Select(c => c.Value.ToString()).FirstOrDefault() ?? "";
      userId = user.Claims.Where(c => c.Type == "http://schemas.microsoft.com/identity/claims/objectidentifier").Select(c => c.Value.ToString()).FirstOrDefault() ?? "";
    }

    UpdateClaims();
    await GetTags();
    await GetDevices();        
  }

  private void UpdateClaims()
  {
    groups = new List<string>();
    var groupClaims = user.Claims.Where(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role" || c.Type == "roles");

    if(groupClaims == null)
    {
      return;
    }

    foreach (var c in groupClaims)
    {
      groups.Add(c.Value);
    }
  }

  private async Task GetTags()
  {
    Guid c = new Guid();
    userMessage = string.Empty;
    try
    {
      deviceTags = await deviceTagDBService.GetDeviceTagsAsync(groups);
    }
    catch(Exception ex)
    {
      userMessage = $"Error retrieving tags.\nCorrelation Id: {c.ToString()}";
      logger.LogError($"{userMessage}\n{ex.Message}\nUser: {userName} {userId}");
    }
  }

  private async Task GetDevices()
  {        
    Guid c = new Guid();
    userMessage = string.Empty;
    try
    {
      devices = await deviceDBService.GetDevicesAsync(groups, search, pageSize, currentPage);
    }
    catch(Exception ex)
    {
      userMessage = $"Error retrieving Devices.\nCorrelation Id: {c.ToString()}";
      logger.LogError($"{userMessage}\n{ex.Message}\nUser: {userName} {userId}");
    }
    finally
    {
      devicesLoading = false;
    }
  }

  private async Task GetDevicesSearch()
  {
    Guid c = new Guid();
    userMessage = string.Empty;
    try
    {
      devices = await deviceDBService.GetDevicesSearchAsync(searchDevice.Make, searchDevice.Model, searchDevice.SerialNumber);
    }
    catch (Exception ex)
    {
      userMessage = $"Error retrieving searching Devices.\nCorrelation Id: {c.ToString()}";
      logger.LogError($"{userMessage}\n{ex.Message}\nUser: {userName} {userId}");
    }
  }

    private async Task AddDevice()
    {
        Guid c = new Guid();
        userMessage = string.Empty;
        try
        {
            if (newDevice.Tags.Count < 1)
            {
                deviceAddValidationMessage = (MarkupString) "Device must have at least one Tag";
                return;
            } 
            else if(newDevice.Tags.Count > 1)
            {
                deviceAddValidationMessage = (MarkupString) "Device must only have one Tag";
                return;
            }
            DeviceTag tag = deviceTags.Where(t => t.Id.ToString() == newDevice.Tags[0]).FirstOrDefault() ?? new DeviceTag();
            if (!authorizationService.AuthorizeAsync(user, tag, Authorization.DeviceTagOperations.Read).Result.Succeeded)
            {
                userMessage = $"Error: Not authorized to add devices to tag {tag.Id} {tag.Name}.\nCorrelation Id: {c.ToString()}";
                logger.LogError($"{userMessage}\nUser: {userName} {userId}");
                return;
            }

            newDevice.ModifiedUTC = DateTime.UtcNow;
            newDevice.AddedBy = userId;
            Device resp = await deviceDBService.AddOrUpdateDeviceAsync(newDevice);
            devices.Add(resp);
            newDevice = new Device();
            deviceAddValidationMessage = (MarkupString) "";
        }
        catch (Exception ex)
        {
            deviceAddValidationMessage = (MarkupString) $"Error adding device: {ex.Message} <br />Correlation Id:{c.ToString()}";
            logger.LogError($"{deviceAddValidationMessage}\n{ex.Message}\nUser: {userName} {userId}");
        }
    }

  private void AddRemoveTag(DeviceTag tag)
  {
    if(newDevice.Tags.Contains(tag.Id.ToString()))
    {
      newDevice.Tags.Remove(tag.Id.ToString());
    }
    else
    {
      newDevice.Tags.Clear();
      newDevice.Tags.Add(tag.Id.ToString());
    }
  }

  private void RemoveDevice(Device device)
  {
    Guid c = Guid.NewGuid();

    if (authorizationService.AuthorizeAsync(user, "DelegationStationAdmin").Result.Succeeded == false)
    {
      string message = $"Error deleting device {deleteDevice.Make} {deleteDevice.Model} {deleteDevice.SerialNumber}.\nCorrelation Id: {c.ToString()}. Insufficient access.";
      logger.LogError($"{message}\nUser: {userName} {userId}");
      userMessage = message;
      return;
    }
    deleteDevice = device;
    Show();
  }

  private async Task DeleteDevice()
  {
    Guid c = Guid.NewGuid();
    if (deleteDevice.Id == Guid.Empty)
    {
      return;
    }

    if (authorizationService.AuthorizeAsync(user, "DelegationStationAdmin").Result.Succeeded == false)
    {
      string message = $"Error deleting device {deleteDevice.Make} {deleteDevice.Model} {deleteDevice.SerialNumber}.\nCorrelation Id: {c.ToString()}. Insufficient access.";
      logger.LogError($"{message}\nUser: {userName} {userId}");
      userMessage = message;
      return;
    }

    try
    {
      await deviceDBService.DeleteDeviceAsync(deleteDevice);
      devices.Remove(deleteDevice);
      string message = $"Correlation Id: {c.ToString()}\nDevice {deleteDevice.Make} {deleteDevice.Model} {deleteDevice.SerialNumber} deleted successfully";
      userMessage = "";
      logger.LogInformation($"{message}\nUser: {userName} {userId}");
    }
    catch (Exception ex)
    {
      string message = $"Error deleting device {deleteDevice.Make} {deleteDevice.Model} {deleteDevice.SerialNumber}.\nCorrelation Id: {c.ToString()}";
      logger.LogError(ex, $"{message}\nUser: {userName} {userId}");
      userMessage = message;
    }
    deleteDevice = new Device() { Id = Guid.Empty };
    confirmMessage = (MarkupString) "";
    StateHasChanged();
  }

  private void Show()
  {
    confirmMessage = (MarkupString) $"<b>Confirm you want to <u>delete</u> this device:</b><br /> <b>Make:</b> {deleteDevice.Make}<br /><b>Model:</b> {deleteDevice.Model}<br /><b>Serial Number:</b> {deleteDevice.SerialNumber}";
    ConfirmDelete?.Show();
  }
}
